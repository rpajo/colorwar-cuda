#include "qdbmp.h" 
#include <stdio.h> 
#include "qdbmp.c"
#include <stdlib.h>
#include <time.h>


int main( int argc, char* argv[] )
{
	UCHAR	r, g, b;
	UINT	width, height;
	UINT	x, y;
	BMP*	bmp;
	BMP*	izhodna;

	/* Check arguments */
	if ( argc != 3 )
	{
		fprintf( stderr, "Usage: %s <input file> <output file>\n", argv[ 0 ] );
		return 0;
	}

	/* Read an image file */
	bmp = BMP_ReadFile( argv[ 1 ] );
	izhodna=bmp;
	BMP_CHECK_ERROR( stdout, -1 );

	/* Get image's dimensions */
	width = BMP_GetWidth( bmp );
	height = BMP_GetHeight( bmp );

	UCHAR tabela[width][height][3];
	UCHAR tabela_sosedov[4][3];
  	int stBarv=0;
  	int random_number=0;
  	int cifra;

  	srand ( time(NULL) );

	/* Iterate through all the image's pixels */
	for ( x = 0 ; x < width ; ++x )
	{
		for ( y = 0 ; y < height ; ++y )
		{
			/* Get pixel's RGB values */
			BMP_GetPixelRGB( bmp, x, y, &r, &g, &b );
				
				tabela[x][y][0]=r;
				tabela[x][y][1]=g;
				tabela[x][y][2]=b;

				// printf("%u ", tabela[x][y][0]);
				// printf("%u ", tabela[x][y][1]);
				// printf("%u \n", tabela[x][y][2]);



			/* Invert RGB values */
			//BMP_SetPixelRGB( bmp, x, y, 255 - r, 255 - g, 255 - b );
		}
	}

	int xx=0;
	int yy=0;
	for ( xx = 0 ; xx < width ; xx++ )
	{
		for ( yy = 0 ; yy < height ; yy++ )
		{
			// printf("%u ", tabela[xx][yy][0]);
			// printf("%u ", tabela[xx][yy][1]);
			// printf("%u \n", tabela[xx][yy][2]);

			stBarv=0;
			if(xx!=0){
				// printf("%u ", tabela[xx-1][yy][0]);
				// printf("%u ", tabela[xx-1][yy][1]);
				// printf("%u \n", tabela[xx-1][yy][2]);

				stBarv++;
				tabela_sosedov[stBarv][0]=tabela[xx-1][yy][0];
				tabela_sosedov[stBarv][1]=tabela[xx-1][yy][1];
				tabela_sosedov[stBarv][2]=tabela[xx-1][yy][2];


			}

			if(yy!=0){
				stBarv++;
				tabela_sosedov[stBarv][0]=tabela[xx][yy-1][0];
				tabela_sosedov[stBarv][1]=tabela[xx][yy-1][1];
				tabela_sosedov[stBarv][2]=tabela[xx][yy-1][2];


			}
			
			if(xx!=width-1){
				stBarv++;
				tabela_sosedov[stBarv][0]=tabela[xx+1][yy][0];
				tabela_sosedov[stBarv][1]=tabela[xx+1][yy][1];
				tabela_sosedov[stBarv][2]=tabela[xx+1][yy][2];


			}
			
			if(yy!=height-1){
				stBarv++;
				tabela_sosedov[stBarv][0]=tabela[xx][yy+1][0];
				tabela_sosedov[stBarv][1]=tabela[xx][yy+1][1];
				tabela_sosedov[stBarv][2]=tabela[xx][yy+1][2];

				
				
			}
			//printf("St. barv: %d \n", stBarv);
			random_number = rand()%stBarv;
			//cifra=random_number;
			printf("%d \n", random_number);
			BMP_SetPixelRGB( izhodna, xx, yy, tabela_sosedov[random_number][0], 
				tabela_sosedov[random_number][1], 
				tabela_sosedov[random_number][2]);

			printf("%u ", tabela_sosedov[random_number][0]);
			printf("%u ", tabela_sosedov[random_number][1]);
			printf("%u \n", tabela_sosedov[random_number][2]);

		}
	}

	/* Save result */
	BMP_WriteFile( izhodna, argv[ 2 ] );
	BMP_CHECK_ERROR( stdout, -2 );


	/* Free all memory allocated for the image */
	BMP_Free( izhodna );

	return 0;
}

